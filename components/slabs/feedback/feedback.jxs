<jittershader name="feedback">
	<description>
	fragment shader for a feedback effect.
	</description>

	<param name="feedback" type="float" default="0.9" />
	<param name="scale" type="float" default="0.9" />
	<param name="b_vanish" type="int" default="1." />
	<param name="direction" type="vec2" default="0.001 0.001" />
	<param name="vanishing_point" type="vec2" default="0.5 0.5" />
	<param name="tex0" type="int" default="0" />
	<param name="tex1" type="int" default="1" />
	<language name="glsl" version="2.1">
		<bind param="b_vanish" program="fp" />
		<bind param="vanishing_point" program="fp" />
		<bind param="scale" program="fp" />
		<bind param="feedback" program="fp" />
		<bind param="direction" program="fp" />
		<bind param="tex0" program="fp" />
		<bind param="tex1" program="fp" />
		<program name="vp" type="vertex" source="sh.passthrudim.vp.glsl" />
		<program name="fp" type="fragment">
<![CDATA[

			uniform sampler2DRect tex0;
			uniform sampler2DRect tex1;

			varying vec2 texdim0;
			varying vec2 texdim1;
			varying vec2 texcoord0;
			varying vec2 texcoord1;

			uniform float feedback;
			uniform vec2 direction;
			uniform vec2 vanishing_point;
			uniform int b_vanish;
			uniform float scale;

			void main()
			{
				vec2 uv = texcoord1/texdim1;
				vec2 vanishing_vector = distance(vanishing_point,uv);

				if(b_vanish){
					uv -= vanishing_point;
					uv += vanishing_point/scale;
					uv *= scale;		
				}else{
					uv += direction;
				}

				vec4 current = texture2DRect(tex0,texcoord0);
				vec4 fedback = texture2DRect(tex1, uv*texdim1) * feedback;

				vec4 color = current + fedback;

				gl_FragColor = vec4(color.r,color.g,color.b,1.0);
				//gl_FragColor = vec4(1.0,0.0,0.0,1.0);
			}
]]>
		</program>
	</language>
</jittershader>
