<jittershader name="lumasker">
	<description>
	luminance threshold alpha generation
	</description>

	<param name="lum" type="vec2" default="0. 1." />
	<param name="tex0" type="int" default="0" />
	<language name="glsl" version="2.1">
		<bind param="lum" program="fp" />
		<bind param="tex0" program="fp" />
		<program name="vp" type="vertex" source="sh.passthrudim.vp.glsl" />
		<program name="fp" type="fragment">
<![CDATA[
			//texture that is being fed in:
			uniform sampler2DRect tex0;
			
			//current coords of the tex
			varying vec2 texcoord0;
			
			//what we feed in, all varying, uniform, and const variables
			//must be declared as global variables
			uniform vec2 lum;
			const vec4 lumcoeff = vec4(0.299,0.587,0.114,0.);
			
			void main()
			{
				vec4 a = texture2DRect(tex0, texcoord0);
				//dot-product is (this.r*that.r+this.g*that.g), which
				//is more efficient, being built-in GLSL, than doing this
				//using math expressions
				float luminance = dot(a,lumcoeff);
				//gl_FragColor is a GLSL built-in variable that defines the color
				//of a specific pixel
				//gl_FragColor = texture2DRect(tex0,texcoord0)*vec4(nothing);
				//step() returns 1 if the second val is > the first
				float clo = step(lum.x,luminance);
				float chi = step(luminance,lum.y);
				
				float amask = clo * chi;
				
				gl_FragColor = vec4(a.rgb,amask);
			}
]]>			
		</program>
	</language>
</jittershader>