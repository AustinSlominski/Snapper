<jittershader name="blank">
	<description>
	heat haze shader. Adapted from shader at 
	"https://www.shadertoy.com/view/XslXWr".
	</description>

	<param name="time" type="float" default="0.0" />
	<param name="speed" type="float" default="10000.0" />
	<param name="range" type="float" default="3.5" />
	<param name="offset" type="float" default="0.8" />
	<param name="strength" type="float" default="50.0" />
	<param name="tex0" type="int" default="0" />
	<param name="tex1" type="int" default="1" />
	<param name="resolution" type="vec2" state='VIEWPORT' />
	<language name="glsl" version="2.1">
		<bind param="time" program="fp" />
		<bind param="speed" program="fp" />
		<bind param="range" program="fp" />
		<bind param="offset" program="fp" />
		<bind param="strength" program="fp" />
		<bind param="tex0" program="fp" />
		<bind param="tex1" program="fp" />
		<bind param="resolution" program="fp" />
		<program name="basic" type="vertex" source="sh.passthrudim.vp.glsl" />
		<program name="fp" type="fragment">
<![CDATA[
			uniform sampler2DRect tex0;
			uniform sampler2DRect tex1;
			
			varying vec2 texdim0;
			varying vec2 texdim1;
			varying vec2 texcoord0;
			varying vec2 texcoord1;
			
			uniform float time;
			uniform vec2 resolution;
			uniform float strength;
			uniform float speed;
			uniform float range;
			uniform float offset;
					
			void main()
			{
				vec2 uv1 = texcoord0 / resolution;
				vec2 uv2 = texcoord1 / resolution;
				

				
				uv2.x = (uv2.x*0.8) * ( ( sin(time / speed) / range) + offset);
				uv2.y = (uv2.y*0.8) * ( ( sin(time / speed) / range) + offset);
				
				vec4 distortionColor = texture2DRect(tex1, uv2 * resolution);
				

				uv1.x = uv1.x + distortionColor.x / strength;
				uv1.y = uv1.y + distortionColor.y / strength;
	
				vec4 col = texture2DRect(tex0, uv1*resolution);
				gl_FragColor = col;
			}
]]>			
		</program>
	</language>
</jittershader>